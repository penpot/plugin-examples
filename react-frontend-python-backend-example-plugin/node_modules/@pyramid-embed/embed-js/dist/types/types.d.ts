import { Filter } from '../filters/filter';
import { Target } from '../filters/target';
export interface PyramidEmbedClientApi {
    login(userName?: string, password?: string, customData?: string): Promise<string>;
    init(userName?: string, password?: string, customData?: string): Promise<string>;
    embed(container: HTMLElement, options?: EmbedContentOptions): Promise<void>;
    setAuthToken(token: string): void;
    getAuthToken(): string;
    host: URL;
    isClientLoaded: boolean;
    isLoggedIn: boolean;
    setAuthFailureCallback(callback: Function): void;
    loginWindowsAuth(): Promise<string>;
    loginSamlAuth(samlToken: string, customData?: string): Promise<string>;
    loginOpenIdAuth(openIdToken: string, customData?: string): Promise<string>;
}
export interface EmbedContentOptions {
    contentId: string;
    filters?: Filter;
    targets?: Target;
    visualOnly?: boolean;
    deviceType?: 'desktop' | 'tablet' | 'phone';
    theme?: 'dark' | 'light';
    slideNumber?: number;
    locale?: string;
    exporting?: {
        exportTypes?: ExportType[];
    };
    fullDiscovery?: boolean;
    onLoad?: (content: EmbeddedResult) => void;
}
type ExportType = 'pdf' | 'png' | 'excel' | 'csv';
type HubTheme = 'light' | 'dark';
type HubResponsivenessType = 'none' | 'compact';
type HubSmartReportDialogPopupMode = 'none' | 'tab' | 'popup';
export interface EmbedHubOptions {
    theme?: HubTheme;
    editable?: boolean;
    style?: Object;
    showTabs?: boolean;
    responsiveness?: HubResponsivenessType;
    locale?: string;
    smartReportDialogPopupMode?: HubSmartReportDialogPopupMode;
    template?: string;
}
export interface QuickEmbedOptions extends EmbedContentOptions {
    container: HTMLElement;
    host: string;
    userName?: string;
    password?: string;
    customData?: string;
}
export declare enum EmbeddedType {
    DataDiscovery = 3,
    Present = 8
}
export interface Member {
    uniqueName: string;
    caption: string;
}
export interface Hierarchy {
    uniqueName: string;
    caption: string;
    members: Member[];
}
export interface Query {
    id: string;
    hierarchies: Hierarchy[];
}
export interface EmbeddedResult {
    contentType: EmbeddedType;
    queries: Query[];
    goToSlide(slideIndex: number): void;
}
export interface GlobalEmbedReportFilter {
    value: string;
}
export interface GlobalEmbedReportTarget {
    name: string;
    filters: GlobalEmbedReportFilter[];
    olap?: boolean;
}
export interface EmbedHubAPI {
    embed(container: HTMLElement | string, options: Partial<EmbedHubOptions>): Promise<void>;
    changeSelectedTab(tabIdx: number): void;
    getSelectedTab(): number;
    getTabsList(): {
        tabName: string;
    }[];
}
export {};
